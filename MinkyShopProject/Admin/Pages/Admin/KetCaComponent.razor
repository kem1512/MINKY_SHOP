@page "/admin/ketca"
@using System.IdentityModel.Tokens.Jwt;
@using MinkyShopProject.Business.Entities;
@using Blazored.LocalStorage;
@using MinkyShopProject.Business.Pagination;
@using MinkyShopProject.Data.Models;
@using PaginationRequest = MinkyShopProject.Business.Pagination.PaginationRequest;
@using System.Net.Mail

<div class="container-fluid py-4">
    <div class="row">
        <div class="card">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div class="form-group">
                        <label class="form-control-label">Nhân viên trực ca: @(NhanVien.Ma) - @(NhanVien.Ten)</label>
                    </div>
                    <div class="form-group">
                        <label class="form-control-label">Thời gian vào ca: @Ca.ThoiGianNhanCa.ToShortTimeString() @(Ca.ThoiGianNhanCa.Day)/@(Ca.ThoiGianNhanCa.Month)/@(Ca.ThoiGianNhanCa.Year) </label>
                    </div>
                    <div class="form-group">
                        <label class="form-control-label">Thời gian hiện tại: @Time.ToShortTimeString() @(Time.Day)/@(Time.Month)/@(Time.Year)</label>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="table-responsive">
                            <table class="table table-bordered">
                                <thead class="table-primary">
                                    <tr>
                                        <th>Mệnh giá</th>
                                        <th>Số lượng</th>
                                        <th>Thành tiền</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Moneys)
                                    {
                                        <tr>
                                            <td><input value="@string.Format("{0:0,0}",item.MenhGia)" class="form-control form-control-sm" disabled /></td>
                                            <td><input value="@(item.SoLuong == 0 ? "" : item.SoLuong)" type="number" class="form-control form-control-sm" @oninput="@(e => ChangeThanhtien(e,item.Id))" /></td>
                                            <td><input value="@string.Format("{0:0,0}",item.ThanhTien)" class="form-control form-control-sm" /></td>
                                        </tr>
                                    }
                                    <tr>
                                        <td colspan="2" class="table-primary">Tổng kê khai tiền mặt cuối ca</td>
                                        <td><input value="@string.Format("{0:0,0}",TongTienMatCuoiCa)" class="form-control form-control-sm" /></td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="col">
                        <div>
                            @if(CaCuoiNgay != true){
                                <div class="form-group  position-relative">
                                    <div class="d-flex justify-content-between">
                                        <label class="form-control-label">Nhân viên bàn giao </label>
                                        <label class="form-control-label text-danger">@(ErrorNhanVien)</label>
                                    </div>
                                    <input value="@(InfoNhanVien)" type="text" class="form-control form-control-sm" @oninput="TimKiemNhanVien" />
                                    <div class="position-relative">
                                        @if (lstNhanVien != null)
                                        {
                                            <div class="position-absolute list-group w-100" style="z-index: 1; right: 0;">
                                                @foreach (var nhanvien in lstNhanVien)
                                                {
                                                    <button class="d-flex list-group-item list-group-item-action align-items-center" @onclick="() => ChooseNhanVien(nhanvien.Id)">
                                                        <div class="mx-auto d-flex justify-content-center">
                                                            <img class="img-thumbnail" src="@(nhanvien.Anh)" style="width: 50px;border-radius: 50%;height: 50px;" />
                                                            <p class="mt-auto mx-1">@(nhanvien.Ma)</p>
                                                            <p class="mt-auto">@(nhanvien.Ten)</p>
                                                        </div>
                                                    </button>
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                            <div class="form-group">
                                <label class="form-control-label">Tổng tiền mặt đầu ca </label>
                                <input value="@(Helper.FormatMoney(Ca.TienBanDau))" type="text" class="form-control form-control-sm" disabled />
                            </div>
                            <div class="form-group">
                                <label class="form-control-label">Hóa đơn trong ca</label>
                                <input value="@(hoadons.Count())" type="text" class="form-control form-control-sm" disabled />
                            </div>
                            <div class="form-group">
                                <label class="form-control-label">Tổng tiền trong ca </label>
                                <input value="@(Helper.FormatMoney(Model.TongTienTrongCa))" type="text" class="form-control form-control-sm" disabled />
                            </div>
                            <div class="form-group">
                                <label class="form-control-label">Tổng tiền mặt trong ca</label>
                                <input value="@(Helper.FormatMoney(Model.TongTienMat))" type="text" class="form-control form-control-sm" disabled />
                            </div>
                            <div class="form-group">
                                <label class="form-control-label">Tổng tiền chuyển khoản</label>
                                <input value="@(Helper.FormatMoney(Model.TongTienKhac))" type="text" class="form-control form-control-sm" disabled />
                            </div>
                            <div class="form-group">
                                <label class="form-control-label">Tiền phát sinh</label>
                                <input value="@(Helper.FormatMoney(Model.TienPhatSinh))" type="text" class="form-control form-control-sm" disabled />
                            </div>
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            <div class="d-flex justify-content-between">
                                <label class="form-control-label">Ghi chú phát sinh </label>
                                <label class="form-control-label text-danger">@(ErrorGhiChu)</label>
                            </div>
                            <textarea @onchange="ChangeGhiChuPhatSinh" class="form-control"></textarea>
                        </div>
                        <div class="form-group">
                            <label class="form-control-label">Tổng Tiền mặt Cuối Ca</label>
                            <input value="@(Helper.FormatMoney(TongTienMatCuoiCa))" type="text" class="form-control form-control-sm" disabled />
                        </div>
                        <div class="form-check form-switch d-flex justify-content-between">
                            <div>
                                <label class="form-control-label">Kết Ca Cuối Ngày</label>
                            </div>
                            <div>
                                <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" @onchange="ChangeKetCa" />
                            </div>
                        </div>
                    </div>
                    <div class="d-flex justify-content-center mt-3">
                        <button class="btn btn-primary" @onclick="KetCa">Báo cáo kết ca</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Inject]
    public ILocalStorageService local { get; set; } = null!;

    [Inject]
    public SweetAlertService Swal { get; set; } = null!;

    [Inject]
    public HttpClient HttpClient { get; set; } = null!;

    [Inject]
    public NavigationManager Navigation { get; set; } = null!;

    private class Money
    {
        public Guid Id { get; set; }
        public float MenhGia { get; set; }
        public float SoLuong { get; set; }
        public float ThanhTien { get; set; }
    }

    private List<Money> Moneys = new List<Money>()
    {
        new Money(){Id = Guid.NewGuid(),MenhGia = 500000,SoLuong = 0,ThanhTien=0},
        new Money(){Id = Guid.NewGuid(),MenhGia = 200000,SoLuong = 0,ThanhTien=0},
        new Money(){Id = Guid.NewGuid(),MenhGia = 100000,SoLuong = 0,ThanhTien=0},
        new Money(){Id = Guid.NewGuid(),MenhGia = 50000,SoLuong = 0,ThanhTien=0},
        new Money(){Id = Guid.NewGuid(),MenhGia = 20000,SoLuong = 0,ThanhTien=0},
        new Money(){Id = Guid.NewGuid(),MenhGia = 10000,SoLuong = 0,ThanhTien=0},
        new Money(){Id = Guid.NewGuid(),MenhGia = 5000,SoLuong = 0,ThanhTien=0},
        new Money(){Id = Guid.NewGuid(),MenhGia = 2000,SoLuong = 0,ThanhTien=0},
        new Money(){Id = Guid.NewGuid(),MenhGia = 1000,SoLuong = 0,ThanhTien=0},
    };

    private float TongTienMatCuoiCa = 0;

    private DateTime Time = DateTime.Now;

    private GiaoCa Ca = new();

    private NhanVien NhanVien = new();

    private float DoanhThu = 0;

    private float DoanhThuTienMat = 0;

    private float DoanhThuChuyenKhoan = 0;

    private List<HoaDon> HoaDons = new();

    private GiaoCaModels.GiaoCaEditModel Model = new GiaoCaModels.GiaoCaEditModel(){TienPhatSinh = 0,GhiChuPhatSinh = string.Empty,ThoiGianGiaoCa = DateTime.Now};

    private Response<PaginationResponse<NhanVien>> Response = new Response<PaginationResponse<NhanVien>>();

    private PaginationRequest Request = new PaginationRequest() { PerPage = 3 ,CurrentPage = 1};

    private List<NhanVien> lstNhanVien = new();

    private string InfoNhanVien = string.Empty;

    private string ErrorNhanVien = string.Empty;

    private string ErrorGhiChu = string.Empty;

    private Guid IdCa;

    private bool CaCuoiNgay = false;

    private List<HoaDon> hoadons = new();

    protected async override Task OnInitializedAsync()
    {
        if (await local.GetItemAsStringAsync("Token") == null)
        {
            Navigation.NavigateTo("/login");
        }
        else
        {
            var jwt = new JwtSecurityTokenHandler().ReadJwtToken(await local.GetItemAsStringAsync("Token"));
            var IdNhanVien = jwt.Claims.FirstOrDefault(c => c.Type.Equals("Id"))?.Value;
            await GetCaHienTai(IdNhanVien, Time);
            await GetNhanVien();
        }
    }

    private async Task GetCaHienTai(string IdNhanVien,DateTime Time)
    {
        var result = await HttpClient.GetFromJsonAsync<Response<GiaoCa>>($"https://localhost:7053/api/GiaoCas?Id={Guid.Parse(IdNhanVien)}&ThoiGian={Time}");
        Ca = result.Data;
        if (Ca == null)
        {
            Navigation.NavigateTo("/admin");
            await Swal.FireAsync("Thông báo", "Bạn chưa bắt đầu ca làm việc",SweetAlertIcon.Warning);
        }
        else
        {
            await GetHoaDonTrongCa();
            Model.TongTienTrongCa = Ca.TongTienMat + DoanhThu;
            Model.TongTienMat = Ca.TongTienMat + DoanhThuTienMat;
            Model.TongTienKhac = DoanhThuChuyenKhoan;
            IdCa = Ca.Id;
        }
    }

    private async Task GetNhanVien()
    {
        var result = await HttpClient.GetFromJsonAsync<Response<NhanVien>>($"https://localhost:7053/api/NhanViens/{Ca.IdNhanVienTrongCa}");
        NhanVien = result.Data;
    }

    private async Task GetHoaDonTrongCa()
    {
        float TongtienHoaDon = 0;
        float TienMatHoaDon = 0;
        float TienChuyenKhoan = 0;
        var result = await HttpClient.GetFromJsonAsync<Response<List<HoaDon>>>($"https://localhost:7053/api/GiaoCas/HoaDonTrongCa?Id={Ca.IdNhanVienTrongCa}&ThoiGian={Time}");
        hoadons = result.Data;
        foreach (var HoaDon in result.Data)
        {
            TongtienHoaDon += HoaDon.TongTien;
            var result2 = await HttpClient.GetFromJsonAsync<Response<List<HinhThucThanhToan>>>($"https://localhost:7053/api/GiaoCas/TienMatHoaDonTrongCa?IdHoaDon={HoaDon.Id}");
            var result3 = await HttpClient.GetFromJsonAsync<Response<List<HinhThucThanhToan>>>($"https://localhost:7053/api/GiaoCas/TienChuyenKhoanHoaDonTrongCa?IdHoaDon={HoaDon.Id}");
            foreach (var hinhthucthanhtoan in result2.Data)
            {
                TienMatHoaDon += hinhthucthanhtoan.TongTienThanhToan;
            }

            foreach (var hinhthucthanhtoan in result3.Data)
            {
                TienChuyenKhoan += hinhthucthanhtoan.TongTienThanhToan;
            }
        }
        DoanhThu = TongtienHoaDon;
        DoanhThuTienMat = TienMatHoaDon;
        DoanhThuChuyenKhoan = TienChuyenKhoan;
    }

    private async Task ChangeThanhtien(ChangeEventArgs e, Guid Id)
    {
        float tongThanhTien = 0;
        float? tienpgatsinh = 0;
        var soLuong = e.Value?.ToString() == "" ? 0 : Convert.ToInt32(e.Value);
        var Money = Moneys.FirstOrDefault(c => c.Id == Id);
        Money.SoLuong = soLuong;
        Money.ThanhTien = Money.MenhGia * soLuong;
        foreach (var item in Moneys)
        {
            tongThanhTien += item.ThanhTien;
        }
        TongTienMatCuoiCa = tongThanhTien;
        Model.TongTienMatCuoiCa = TongTienMatCuoiCa;
        Model.TienPhatSinh = Model.TongTienMat - tongThanhTien;
        if (Model.TienPhatSinh <= 0 || tongThanhTien == 0)
        {
            Model.TienPhatSinh = 0;
        }
    }

    private async Task TimKiemNhanVien(ChangeEventArgs e)
    {
        if(e.Value?.ToString().Length == 0)
        {
            lstNhanVien = new();
            InfoNhanVien = string.Empty;
            ErrorNhanVien = "Nhân viên cho ca tiếp theo không được để trống!";
        }
        else
        {
            Request.Keyword = e.Value?.ToString();
            Response = await HttpClient.GetFromJsonAsync<Response<PaginationResponse<NhanVien>>>($"https://localhost:7053/api/NhanViens?PerPage={Request.PerPage}&CurrentPage={Request.CurrentPage}&Keyword={Request.Keyword}");
            lstNhanVien = Response.Data.Data.Where(c => c.Id != Ca.IdNhanVienTrongCa).ToList();
            InfoNhanVien = string.Empty;
            ErrorNhanVien = "";
        }
    }

    private async Task ChooseNhanVien(Guid Id)
    {
        var result = await HttpClient.GetFromJsonAsync<Response<NhanVien>>($"https://localhost:7053/api/NhanViens/{Id}");
        var nhanvien = result.Data;
        Model.IdNhanVienCaTiepTheo = Id;
        InfoNhanVien = $"{nhanvien.Ma} - {nhanvien.Ten}";
        lstNhanVien = new();
    }

    private async Task KetCa()
    {
        if (InfoNhanVien == string.Empty && CaCuoiNgay == false)
        {
            ErrorNhanVien = "Nhân viên cho ca tiếp theo không được để trống!";
        }
        else if (Model.TienPhatSinh != 0 && Model.GhiChuPhatSinh == "")
        {
            ErrorGhiChu = "Ghi chú không được để trống!";
        }
        else
        {

            var confirm = await Swal.FireAsync(new SweetAlertOptions { Title = "Bạn Có Chắc Muốn Kết Ca", ShowConfirmButton = true, ShowCancelButton = true, Icon = SweetAlertIcon.Question });

            if (string.IsNullOrEmpty(confirm.Value)) return;

            if (CaCuoiNgay == true)
            {
                Model.ThoiGianReset = DateTime.Now;
            }

            var result = await HttpClient.PostAsJsonAsync($"https://localhost:7053/api/GiaoCas/KetCa/{IdCa}", Model);
            if (result.IsSuccessStatusCode)
            {
                await Swal.FireAsync("Thông báo", result.Content.ReadFromJsonAsync<Response>().Result.Message, SweetAlertIcon.Success);
                Navigation.NavigateTo("/admin");
            }
            await Swal.FireAsync("", result.Content.ReadFromJsonAsync<Response>().Result.Message, SweetAlertIcon.Error);
        }
    }

    private async Task ChangeGhiChuPhatSinh(ChangeEventArgs e)
    {
        Model.GhiChuPhatSinh = e.Value.ToString();
    }

    private async Task ChangeKetCa(ChangeEventArgs e)
    {
        if (e.Value?.ToString() == "True")
        {
            CaCuoiNgay = true;
        }
        else
        {
            CaCuoiNgay = false;
        }
    }
}
