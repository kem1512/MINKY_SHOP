@page "/productdetail"
@using MinkyShopProject.Data.Models
@inject SweetAlertService Swal;
@inject HttpClient HttpClient;
@inject IJSRuntime JSRuntime;

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header pb-0">
                    <div class="d-flex align-items-center">
                        <p class="mb-0">Edit Profile</p>
                        <button class="btn btn-primary btn-sm ms-auto">Save</button>
                    </div>
                </div>
                <div class="card-body">
                    <div>
                        @foreach (var x in Model.Select((Value, Index) => (Index, Value)))
                        {
                            <div class="d-flex m-0">
                                <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-@x.Index" aria-expanded="false" aria-controls="collapseExample">
                                    @x.Value.Ten @x.Value.GiaTri
                                </button>
                                <button @onclick="() => DeleteAsync(x.Index)" class="btn btn-danger ms-auto" type="button">
                                    <i class="fas fa-trash" aria-hidden="true"></i>
                                </button>
                            </div>
                            <div class="collapse mb-3" id="collapse-@x.Index">
                                <div class="card card-body shadow-none border-3">
                                    <div class="row py-4">
                                        <div class="col-lg-4">
                                            <div class="card h-100">
                                                <div class="card-body">
                                                    <h5 class="font-weight-bolder">Product Image</h5>
                                                    <div class="row">
                                                        <div class="col-12">
                                                            <img class="w-100 border-radius-lg shadow-lg mt-3"
                                                            src="https://raw.githubusercontent.com/creativetimofficial/public-assets/master/argon-dashboard-pro/assets/img/product-page.jpg" 
                                                            alt="product_image" data-bs-toggle="modal" data-bs-target="#modal-image">
                                                        </div>
                                                        <div class="col-12 mt-5">
                                                            <div class="d-flex">
                                                                <button class="btn btn-primary btn-sm mb-0 me-2" type="button" name="button" @onmousedown="() => UpdateAsync(x.Index)">Edit</button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-lg-8 mt-lg-0 mt-4">
                                            <div class="card">
                                                <div class="card-body">
                                                    <div class="row">
                                                        <div class="col-12 col-sm-6">
                                                            <label>Tên Sản Phẩm</label>
                                                            <input class="form-control" type="text" value="@x.Value.Ten" onfocus="focused(this)" onfocusout="defocused(this)">
                                                        </div>
                                                        <div class="col-12 col-sm-6 mb-3">
                                                            <label>Số Lượng</label>
                                                            <input class="form-control" type="number" value="@x.Value.SoLuong" @oninput='(ui) => { Model[x.Index].SoLuong = int.Parse(ui.Value?.ToString() ?? "0"); }' 
                                                            onfocus="focused(this)" onfocusout="defocused(this)">
                                                        </div>
                                                        <div class="col-12 col-sm-6 mb-3">
                                                            <label>Giá Tiền</label>
                                                            <input class="form-control" type="text" value="@x.Value.GiaBan" @oninput='(ui) => { Model[x.Index].GiaBan = float.Parse(ui.Value?.ToString() ?? "0"); }'>
                                                        </div>
                                                        <div class="col-12 col-sm-6 mb-3">
                                                            <label>SKU</label>
                                                            <input class="form-control" type="text" value="@x.Value.Sku">
                                                        </div>
                                                        <div class="col-12 col-sm-12 mb-3">
                                                            <label>Mô Tả</label>
                                                            <textarea class="form-control" type="text" rows="4"></textarea>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-image" tabindex="-1" role="dialog" aria-labelledby="modal-default" aria-hidden="true">
    <div class="modal-dialog modal-fullscreen modal-dialog-centered modal-" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <div class="row p-0">
                    @if (Model2 != null)
                    {
                        @foreach (var x in Model2.Select((Value, Index) => (Index, Value)))
                        {
                            <div class="col-2 border">
                                <img src="@x.Value" class="w-100 p-3" @onclick="() => Method(x.Index)" data-bs-dismiss="modal" />
                            </div>
                        }
                    }
                    else
                    {
                        <div class="spinner-grow" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>

@code{
    List<BienTheModel> Model = new List<BienTheModel>();

    string Url = "https://localhost:7053/api";

    protected override async Task OnInitializedAsync()
    {
        using (HttpClient httpClient = new HttpClient())
        {
            Model = await httpClient.GetFromJsonAsync<List<BienTheModel>>($"{Url}/BienThe") ?? new List<BienTheModel>();
            Model2 = await JSRuntime.InvokeAsync<List<string>>("images");
        }
    }

    async Task DeleteAsync(int index)
    {
        var confirm = await Swal.FireAsync(new SweetAlertOptions { Title = "Bạn Có Chắc Muốn Xóa", ShowConfirmButton = true, ShowCancelButton = true, Icon = SweetAlertIcon.Warning });

        if (string.IsNullOrEmpty(confirm.Value)) return;

        await HttpClient.DeleteAsync($"{Url}/SanPham?id={Model[index]}");
        Model.RemoveAt(index);
    }

    async Task UpdateAsync(int index)
    {
        var confirm = await Swal.FireAsync(new SweetAlertOptions { Title = "Bạn Có Chắc Muốn Sửa", ShowConfirmButton = true, ShowCancelButton = true, Icon = SweetAlertIcon.Warning });

        if (string.IsNullOrEmpty(confirm.Value)) return;

        var result = Model[index];
        result.Anh = "1";

        var result2 = await HttpClient.PutAsJsonAsync<BienTheModel>($"{Url}/BienThe?id={Model[index].Id}", result);

        if(result2.IsSuccessStatusCode)
            await Swal.FireAsync("Thông Báo", "Cập Nhật Thành Công", SweetAlertIcon.Success);
    }

    List<string> Model2 = new List<string>();

    private async Task Method(int index)
    {
        Console.WriteLine(Model2[index]);
    }
}